#!/usr/bin/env python

""" This script cleans up Helm deployments older than X days.

To run this script, you must have:
* Helm installed and initialised (helm init)
* Permissions configured on Kubernetes cluster

"""

import logging
import subprocess
import datetime
from dateutil.parser import parse

DAYS_TO_KEEP="{{ helm_release_cap }}"
LOG_FILE="{{ helm_release_log_file }}"

def main():
    logging.basicConfig(filename=LOG_FILE,level=logging.DEBUG,format='%(asctime)s %(message)s')

    releases = subprocess.check_output("helm ls --namespace ephemeral -d | \
                                          awk '{print $1\",\"$3,$4,$5,$6,$7}' | tail -n+2",
                                          shell=True).split('\n')
    releases.pop() # Remove last item which is an empty string
    release_count = len(releases)

    if release_count > 0:
        logging.debug('Found %s releases older than %s day(s)' %(release_count, DAYS_TO_KEEP))

    releases_deleted = []

    for release in releases:
        try:
            release_name = release.split(",")[0]
            release_updated = release.split(",")[1]

            date = parse(release_updated)

            if date < datetime.datetime.now() - datetime.timedelta(days=DAYS_TO_KEEP):
                logging.debug('Deleting %s...' %release_name)
                cmd = "helm delete --purge %s" %release_name
                output = subprocess.check_call(cmd, shell=True)
                if output != 0:
                    logging.warning('Error deleting %s' %release_name)
                else:
                    logging.debug('Deleted %s' %release_name)
                    releases_deleted += 1

        except IndexError:
            pass

    logging.debug('Deleted %s releases' %len(releases_deleted))

if __name__ == "__main__":
    main()
